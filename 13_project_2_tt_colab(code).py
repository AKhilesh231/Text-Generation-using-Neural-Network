# -*- coding: utf-8 -*-
"""13_Project_2_TT.colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kevDwfrzocaecFgFkOXJAnT5LxMrOeLl
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install tensorflow==1.14.0

# Standard Data Science Libraries
import pickle
import math
import pandas as pd
import numpy as np
from numpy import array

# Neural Net Preprocessing
from sklearn.feature_extraction.text import CountVectorizer
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.sequence import pad_sequences
# Neural Net Layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Embedding

# Neural Net Training
from tensorflow.keras.models import load_model
from tensorflow.keras.callbacks import ModelCheckpoint
from keras.callbacks import EarlyStopping

from pickle import load

# Import the data
train= pd.read_csv('/content/train.csv')
# Selecting Edgar Allen Poe as author style to emulate
author= train[train['author'] == 'EAP']["text"]
print('Number of training sentences: ',author.shape[0])

test= pd.read_csv('/content/test.csv')
author_test = test["text"]
print('Number of training sentences: ',author_test.shape[0])

max_words = 50000 
tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(author.values)
sequences = tokenizer.texts_to_sequences(author.values)
print(sequences[:5])

text = [item for sublist in sequences for item in sublist]
vocab_size = len(tokenizer.word_index)
print('Vocabulary size in this corpus: ', vocab_size)

# Training on 19 words to predict the 20th
sen_len = 20
pred_len = 1
t_len = sen_len - pred_len
seq = []

for i in range(len(text)-sen_len):
    seq.append(text[i:i+sen_len])
reverse_word_map = dict(map(reversed, tokenizer.word_index.items()))

trainX = []
trainy = []
for i in seq:
    trainX.append(i[:t_len])
    trainy.append(i[-1])

model = Sequential([
    Embedding(vocab_size+1, 50, input_length=t_len),
    LSTM(100, return_sequences=True),
    LSTM(100),
    Dense(100, activation='relu'),
    Dense(vocab_size, activation='softmax')
])
# model.summary()

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(np.asarray(trainX), pd.get_dummies(np.asarray(trainy)), batch_size=128, epochs=3)

model.save('model_weights.hdf5')

model_2 = Sequential([
    Embedding(vocab_size+1, 50, input_length=t_len),
    LSTM(100, return_sequences=True),
    LSTM(100),
    Dense(100, activation='relu'),
    Dropout(0.1),
    Dense(vocab_size, activation='softmax')
])

# model_2.compile(optimizer='adam',
#               loss='categorical_crossentropy',
#               metrics=['accuracy'])

# history = model_2.fit(np.asarray(trainX),
#          pd.get_dummies(np.asarray(trainy)),
#          epochs = 300,
#          batch_size = 
128,
#          callbacks = callbacks_list,
#          verbose = 1)

model_2.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model_2.load_weights('/content/model_2_weights_colab.hdf5')

model_3 = Sequential([
    Embedding(vocab_size+1, 50, input_length=t_len),
    LSTM(150, return_sequences=True),
    LSTM(150),
    Dense(150, activation='relu'),
    Dense(vocab_size, activation='softmax')
])

model_3.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model_3.load_weights('/content/model_3_weights_colab.hdf5')

from keras.preprocessing import sequence,text
from keras.preprocessing.text import Tokenizer
from keras.models import Sequential
from keras.layers import Dense,Dropout,Embedding,Conv1D,GlobalMaxPooling1D,Flatten,MaxPooling1D
from keras.callbacks import EarlyStopping
from keras.utils import to_categorical
from keras.losses import categorical_crossentropy
from sklearn.metrics import accuracy_score,classification_report,f1_score
from sklearn import metrics
import warnings
warnings.filterwarnings("ignore")


# define model
model_4 = Sequential([
    Embedding(vocab_size+1, 50, input_length=t_len),
    Conv1D(64,kernel_size=3,padding='same',activation='relu',strides=1),
    GlobalMaxPooling1D(),
    Dropout(0.2),
    Dense(150, activation='relu'),
    Dense(vocab_size, activation='softmax')
])

model_4.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model_4.fit(np.asarray(trainX), pd.get_dummies(np.asarray(trainy)), batch_size=128, epochs=3)

model_4.save('model4_weights.hdf5')

from sklearn import metrics
scores1 = model.evaluate(np.asarray(trainX), pd.get_dummies(np.asarray(trainy)), verbose=0)
print("Accuracy: %.2f%%" % (scores1[1]*100))

scores2 = model_2.evaluate(np.asarray(trainX), pd.get_dummies(np.asarray(trainy)), verbose=0)
print("Accuracy: %.2f%%" % (scores2[1]*100))

scores3 = model_3.evaluate(np.asarray(trainX), pd.get_dummies(np.asarray(trainy)), verbose=0)
print("Accuracy: %.2f%%" % (scores3[1]*100))

scores4 = model_4.evaluate(np.asarray(trainX), pd.get_dummies(np.asarray(trainy)), verbose=0)
print("Accuracy: %.2f%%" % (scores4[1]*100))

def gen(model,seq,max_len = 20):
    t_sentence = tokenizer.texts_to_sequences([seq])
    max_len = max_len+len(t_sentence[0])
    while len(t_sentence[0]) < max_len:
        padded_sentence = pad_sequences(t_sentence[-19:],maxlen=19)
        op = model.predict(np.asarray(padded_sentence).reshape(1,-1))
        t_sentence[0].append(op.argmax()+1)
        
    return " ".join(map(lambda x : reverse_word_map[x],t_sentence[0]))

import seaborn as sns
import matplotlib.pyplot as plt

dist = train.groupby(["author"]).size()
dist = dist / dist.sum()
fig, ax = plt.subplots(figsize=(12,8))
sns.barplot(dist.keys(), dist.values);

result= [model,model_2,model_3,model_4]
def test_models(test_string,sequence_length= 50, result = result):
  '''Generates output given input test_string up to sequence_length'''
  print('Input String: ', test_string)
  for counter,model in enumerate(result):
    print("Model ", counter+1, ":")
    print(gen(model,test_string,sequence_length))
  pass

test_models('This process however afforded me', 10)

test_models(author_test.iloc[8390])